# -*- coding: utf-8 -*-
"""제출 파일3

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v4SGHPoBXWNHi1z1v4xOjiNruiUQS6ZX

# Library Import
"""

from google.colab import drive
drive.mount('/content/drive')
import numpy as np
import pandas as pd
from scipy.stats import norm
import statsmodels.api as sm
from tqdm import tqdm
import seaborn as sns
import datetime as dt
import matplotlib as mpl
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
from statsmodels.tsa.arima_model import ARIMA
from pandas import datetime
import itertools
from os import EX_OK

!apt-get update -qq
!apt-get install fonts-nanum* -qq
path = '/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf' 
font_name = fm.FontProperties(fname=path, size=10).get_name()
print(font_name)
plt.rc('font', family=font_name)
fm._rebuild()
mpl.rcParams['axes.unicode_minus'] = False

"""# Data Load"""

data = pd.read_excel('/content/drive/MyDrive/Colab Notebooks/공모전/제10회 산업통상자원부 공공데이터활용 BI공모전_빅데이터 분석 과제 1_데이터.xlsx',
                   sheet_name = '2. raw data')
data = data.set_index('기간', drop=True)
data.head()
data = data[:252]

"""# Column별 model fitting"""

data_KR = pd.DataFrame(data['한국 수출금액'])
data_CH = pd.DataFrame(data['한국의대중국수출'])
data_US = pd.DataFrame(data['한국의대미국수출'])
data_VE = pd.DataFrame(data['한국의대베트남수출'])
data_HO = pd.DataFrame(data['한국의대홍콩수출'])
data_JA = pd.DataFrame(data['한국의대일본수출'])

"""## 한국 수출금액"""

p=d=q=range(0,2)
pdq = list(itertools.product(p,d,q))
seasonal_pdq = [(x[0],x[1],x[2],12) for x in list(itertools.product(p,d,q))]
result_list =[]
AIC = []
SARIMAX_order = []
for param in pdq:
  for param_seasonal in seasonal_pdq:
    try:
      mod = sm.tsa.statespace.SARIMAX(data_KR,exog=None, order = param,
                                      seasonal_order = param_seasonal,
                                      enforce_stationarity=True,
                                      enforce_invertibility=True)
      results = mod.fit()
      print('ARIMA{}x{}12-AIC:{}'.format(param, param_seasonal, round(results.aic,2)))
      result_list.extend([param, param_seasonal, round(results.aic,2)])
      AIC.append(results.aic)
      SARIMAX_order.append([param, param_seasonal])
    except:
      print('error')
      continue
print('The smallest AIC is {} for model SARIMAX{}x{}'.format(min(AIC), SARIMAX_order[AIC.index(min(AIC))][0],
                                                             SARIMAX_order[AIC.index(min(AIC))][1]))

model_KR = sm.tsa.statespace.SARIMAX(data_KR, exog=None, order = (1,1,0),
                                  seasonal_order = (0,1,1,12),
                                  enforce_invertibility=True,
                                  enforce_stationarity=True)
model_KR_fit = model_KR.fit(disp=False)

"""## 한국의대중국수출"""

p=d=q=range(0,2)
pdq = list(itertools.product(p,d,q))
seasonal_pdq = [(x[0],x[1],x[2],12) for x in list(itertools.product(p,d,q))]
result_list =[]
AIC = []
SARIMAX_order = []
for param in pdq:
  for param_seasonal in seasonal_pdq:
    try:
      mod = sm.tsa.statespace.SARIMAX(data_CH,exog=None, order = param,
                                      seasonal_order = param_seasonal,
                                      enforce_stationarity=True,
                                      enforce_invertibility=True)
      results = mod.fit()
      print('ARIMA{}x{}12-AIC:{}'.format(param, param_seasonal, round(results.aic,2)))
      result_list.extend([param, param_seasonal, round(results.aic,2)])
      AIC.append(results.aic)
      SARIMAX_order.append([param, param_seasonal])
    except:
      print('error')
      continue
print('The smallest AIC is {} for model SARIMAX{}x{}'.format(min(AIC), SARIMAX_order[AIC.index(min(AIC))][0],
                                                             SARIMAX_order[AIC.index(min(AIC))][1]))

model_CH = sm.tsa.statespace.SARIMAX(data_CH, exog=None, order = (0,1,0),
                                  seasonal_order = (0,1,1,12),
                                  enforce_invertibility=True,
                                  enforce_stationarity=True)
model_CH_fit = model_CH.fit(disp=False)

"""## 한국의대미국수출"""

p=d=q=range(0,2)
pdq = list(itertools.product(p,d,q))
seasonal_pdq = [(x[0],x[1],x[2],12) for x in list(itertools.product(p,d,q))]
result_list =[]
AIC = []
SARIMAX_order = []
for param in pdq:
  for param_seasonal in seasonal_pdq:
    try:
      mod = sm.tsa.statespace.SARIMAX(data_US,exog=None, order = param,
                                      seasonal_order = param_seasonal,
                                      enforce_stationarity=True,
                                      enforce_invertibility=True)
      results = mod.fit()
      print('ARIMA{}x{}12-AIC:{}'.format(param, param_seasonal, round(results.aic,2)))
      result_list.extend([param, param_seasonal, round(results.aic,2)])
      AIC.append(results.aic)
      SARIMAX_order.append([param, param_seasonal])
    except:
      print('error')
      continue
print('The smallest AIC is {} for model SARIMAX{}x{}'.format(min(AIC), SARIMAX_order[AIC.index(min(AIC))][0],
                                                             SARIMAX_order[AIC.index(min(AIC))][1]))

model_US = sm.tsa.statespace.SARIMAX(data_US, exog=None, order = (0,1,1),
                                  seasonal_order = (0,1,1,12),
                                  enforce_invertibility=True,
                                  enforce_stationarity=True)
model_US_fit = model_US.fit(disp=False)

"""## 한국의대베트남수출"""

p=d=q=range(0,2)
pdq = list(itertools.product(p,d,q))
seasonal_pdq = [(x[0],x[1],x[2],12) for x in list(itertools.product(p,d,q))]
result_list =[]
AIC = []
SARIMAX_order = []
for param in pdq:
  for param_seasonal in seasonal_pdq:
    try:
      mod = sm.tsa.statespace.SARIMAX(data_VE,exog=None, order = param,
                                      seasonal_order = param_seasonal,
                                      enforce_stationarity=True,
                                      enforce_invertibility=True)
      results = mod.fit()
      print('ARIMA{}x{}12-AIC:{}'.format(param, param_seasonal, round(results.aic,2)))
      result_list.extend([param, param_seasonal, round(results.aic,2)])
      AIC.append(results.aic)
      SARIMAX_order.append([param, param_seasonal])
    except:
      print('error')
      continue
print('The smallest AIC is {} for model SARIMAX{}x{}'.format(min(AIC), SARIMAX_order[AIC.index(min(AIC))][0],
                                                             SARIMAX_order[AIC.index(min(AIC))][1]))

model_VE = sm.tsa.statespace.SARIMAX(data_VE, exog=None, order = (1,1,1),
                                  seasonal_order = (0,1,1,12),
                                  enforce_invertibility=True,
                                  enforce_stationarity=True)
model_VE_fit = model_VE.fit(disp=False)

"""## 한국의대홍콩수출"""

p=d=q=range(0,2)
pdq = list(itertools.product(p,d,q))
seasonal_pdq = [(x[0],x[1],x[2],12) for x in list(itertools.product(p,d,q))]
result_list =[]
AIC = []
SARIMAX_order = []
for param in pdq:
  for param_seasonal in seasonal_pdq:
    try:
      mod = sm.tsa.statespace.SARIMAX(data_HO,exog=None, order = param,
                                      seasonal_order = param_seasonal,
                                      enforce_stationarity=True,
                                      enforce_invertibility=True)
      results = mod.fit()
      print('ARIMA{}x{}12-AIC:{}'.format(param, param_seasonal, round(results.aic,2)))
      result_list.extend([param, param_seasonal, round(results.aic,2)])
      AIC.append(results.aic)
      SARIMAX_order.append([param, param_seasonal])
    except:
      print('error')
      continue
print('The smallest AIC is {} for model SARIMAX{}x{}'.format(min(AIC), SARIMAX_order[AIC.index(min(AIC))][0],
                                                             SARIMAX_order[AIC.index(min(AIC))][1]))

model_HO = sm.tsa.statespace.SARIMAX(data_HO, exog=None, order = (0,1,1),
                                  seasonal_order = (0,1,1,12),
                                  enforce_invertibility=True,
                                  enforce_stationarity=True)
model_HO_fit = model_HO.fit(disp=False)

"""## 한국의대일본수출"""

p=d=q=range(0,2)
pdq = list(itertools.product(p,d,q))
seasonal_pdq = [(x[0],x[1],x[2],12) for x in list(itertools.product(p,d,q))]
result_list =[]
AIC = []
SARIMAX_order = []
for param in pdq:
  for param_seasonal in seasonal_pdq:
    try:
      mod = sm.tsa.statespace.SARIMAX(data_JA,exog=None, order = param,
                                      seasonal_order = param_seasonal,
                                      enforce_stationarity=True,
                                      enforce_invertibility=True)
      results = mod.fit()
      print('ARIMA{}x{}12-AIC:{}'.format(param, param_seasonal, round(results.aic,2)))
      result_list.extend([param, param_seasonal, round(results.aic,2)])
      AIC.append(results.aic)
      SARIMAX_order.append([param, param_seasonal])
    except:
      print('error')
      continue
print('The smallest AIC is {} for model SARIMAX{}x{}'.format(min(AIC), SARIMAX_order[AIC.index(min(AIC))][0],
                                                             SARIMAX_order[AIC.index(min(AIC))][1]))

model_JA = sm.tsa.statespace.SARIMAX(data_JA, exog=None, order = (0,1,1),
                                  seasonal_order = (0,1,1,12),
                                  enforce_invertibility=True,
                                  enforce_stationarity=True)
model_JA_fit = model_JA.fit(disp=False)

"""## 21.01.01 ~ 22.12.01 예측"""

start_index = datetime(2021,1,1)
end_index = datetime(2021,12,1)
forecast_US = model_US_fit.predict(start = start_index, end = end_index)
forecast_CH = model_CH_fit.predict(start = start_index, end = end_index)
forecast_VE = model_VE_fit.predict(start = start_index, end = end_index)
forecast_HO = model_HO_fit.predict(start = start_index, end = end_index)
forecast_JA = model_JA_fit.predict(start = start_index, end = end_index)

forecast = pd.concat([forecast_CH,forecast_US,forecast_VE,forecast_HO,forecast_JA], axis=1)
forecast.columns = ["한국의대중국수출","한국의대미국수출","한국의대베트남수출","한국의대홍콩수출","한국의대일본수출"]
forecast

"""# SARIMAX 로 한국 수출금액 예측"""

exog_data = data.drop(['한국 수출금액'], axis =1)
exog = sm.add_constant(exog_data)
endog = data[['한국 수출금액']]

p=d=q=range(0,2)
pdq = list(itertools.product(p,d,q))
seasonal_pdq = [(x[0],x[1],x[2],12) for x in list(itertools.product(p,d,q))]
result_list =[]
AIC = []
SARIMAX_order = []
for param in pdq:
  for param_seasonal in seasonal_pdq:
    try:
      mod = sm.tsa.statespace.SARIMAX(endog,exog=exog,
                                      order = param,
                                      seasonal_order = param_seasonal,
                                      enforce_stationarity=True,
                                      enforce_invertibility=True)
      results = mod.fit()
      print('ARIMA{}x{}12-AIC:{}'.format(param, param_seasonal, round(results.aic,2)))
      result_list.extend([param, param_seasonal, round(results.aic,2)])
      AIC.append(results.aic)
      SARIMAX_order.append([param, param_seasonal])
    except:
      print('error')
      continue
print('The smallest AIC is {} for model SARIMAX{}x{}'.format(min(AIC), SARIMAX_order[AIC.index(min(AIC))][0],
                                                             SARIMAX_order[AIC.index(min(AIC))][1]))

model = sm.tsa.statespace.SARIMAX(endog, exog=exog, order=(0,1,1),
                                  seasonal_order=(0,1,1,12))
fit_res = model.fit()

# 예측

first_predict = forecast.iloc[0].name
exog1 = (sm.add_constant(forecast).loc[first_predict:])
forecast1 = fit_res.forecast(steps = len(forecast),exog = exog1)
forecast1 = forecast1.to_frame()
forecast1.columns = ["한국 수출예측"]
forecast1

data = pd.read_excel('/content/drive/MyDrive/Colab Notebooks/공모전/제10회 산업통상자원부 공공데이터활용 BI공모전_빅데이터 분석 과제 1_데이터.xlsx',
                   sheet_name = '2. raw data')
data = data[252:]

def find_RMSE(prediction, groundtruth):
  return np.sqrt(np.mean(np.square(prediction-groundtruth)))

find_RMSE(forecast1[['한국 수출예측']].values,data[['한국 수출금액']].values)