# -*- coding: utf-8 -*-
"""제출 파일1의 사본

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aG3LjZG1Us9gHCI2sQErYsqsqp-IUm0Q

# Library Import
"""

# Library Import
!pip install prophet
import statsmodels.api as sm
from tqdm import tqdm
import numpy as np
import pandas as pd
import datetime as dt
import itertools
from statsmodels.tsa.arima_model import ARIMA

"""# Data Load"""

# Data Load

from google.colab import drive
drive.mount('/content/drive')
data = pd.read_excel('/content/drive/MyDrive/Colab Notebooks/공모전/제10회 산업통상자원부 공공데이터활용 BI공모전_빅데이터 분석 과제 1_데이터.xlsx',
                   sheet_name = '2. raw data')
data = data[:252]
data.head()

"""# Prophet Prediction"""

# Prophet Prediction

data_CH = pd.DataFrame(data[['기간','한국의대중국수출']])
data_US = pd.DataFrame(data[['기간','한국의대미국수출']])
data_VE = pd.DataFrame(data[['기간','한국의대베트남수출']])
data_HO = pd.DataFrame(data[['기간','한국의대홍콩수출']])
data_JA = pd.DataFrame(data[['기간','한국의대일본수출']])

data_CH.columns =['ds','y']
data_US.columns =['ds','y']
data_VE.columns =['ds','y']
data_HO.columns =['ds','y']
data_JA.columns =['ds','y']

data_CH['ds'] = pd.to_datetime(data_CH['ds'])
data_US['ds'] = pd.to_datetime(data_US['ds'])
data_VE['ds'] = pd.to_datetime(data_VE['ds'])
data_HO['ds'] = pd.to_datetime(data_HO['ds'])
data_JA['ds'] = pd.to_datetime(data_JA['ds'])

from prophet import Prophet
model_CH = Prophet()
model_CH.fit(data_CH)
model_US = Prophet()
model_US.fit(data_US)
model_VE = Prophet()
model_VE.fit(data_VE)
model_HO = Prophet()
model_HO.fit(data_HO)
model_JA = Prophet()
model_JA.fit(data_JA)

after_1year = list()
for i in range(1, 13):
  after_1year.append(['2021-%02d-01' % i])
after_1year = pd.DataFrame(after_1year, columns = ['ds'])
after_1year['ds'] = pd.to_datetime(after_1year['ds'])

forecast_CH = model_CH.predict(after_1year)
forecast_US = model_US.predict(after_1year)
forecast_VE = model_VE.predict(after_1year)
forecast_HO = model_HO.predict(after_1year)
forecast_JA = model_JA.predict(after_1year)

forecast_CH = forecast_CH[["ds","yhat"]]
forecast_US = forecast_US[["yhat"]]
forecast_VE = forecast_VE[["yhat"]]
forecast_HO = forecast_HO[["yhat"]]
forecast_JA = forecast_JA[["yhat"]]

forecast = pd.concat([forecast_CH,forecast_US,forecast_VE,forecast_HO,forecast_JA], axis =1)
forecast.columns = ['기간',"한국의대중국수출","한국의대미국수출","한국의대베트남수출","한국의대홍콩수출","한국의대일본수출"]
forecast1 = forecast.set_index('기간', drop=True)
forecast1

"""# SARIMAX Prediction"""

# SARIMAX Prediction

data1 = data.set_index('기간', drop=True)
exog_data = data1.drop(['한국 수출금액'], axis =1)
exog = sm.add_constant(exog_data)
endog = data1[['한국 수출금액']]

p=d=q=range(0,2)
pdq = list(itertools.product(p,d,q))
seasonal_pdq = [(x[0],x[1],x[2],12) for x in list(itertools.product(p,d,q))]
result_list =[]
AIC = []
SARIMAX_order = []
for param in pdq:
  for param_seasonal in seasonal_pdq:
    try:
      mod = sm.tsa.statespace.SARIMAX(endog,exog=exog, order = param,
                                      seasonal_order = param_seasonal,
                                      enforce_stationarity=True,
                                      enforce_invertibility=True)
      results = mod.fit()
      print('ARIMA{}x{}12-AIC:{}'.format(param, param_seasonal, round(results.aic,2)))
      result_list.extend([param, param_seasonal, round(results.aic,2)])
      AIC.append(results.aic)
      SARIMAX_order.append([param, param_seasonal])
    except:
      print('error')
      continue
print('The smallest AIC is {} for model SARIMAX{}x{}'.format(min(AIC), SARIMAX_order[AIC.index(min(AIC))][0],
                                                             SARIMAX_order[AIC.index(min(AIC))][1]))

model = sm.tsa.statespace.SARIMAX(endog, exog=exog, order=(0,1,1),
                                  seasonal_order=(0,1,1,12))
fit_res = model.fit()

# Prediction

first_predict = forecast1.iloc[0].name
exog1 = (sm.add_constant(forecast1).loc[first_predict:])
forecast2 = fit_res.forecast(steps = len(forecast1),exog = exog1)

"""RMSE"""

forecast2  = pd.DataFrame(forecast2)
forecast2

data = pd.read_excel('/content/drive/MyDrive/Colab Notebooks/공모전/제10회 산업통상자원부 공공데이터활용 BI공모전_빅데이터 분석 과제 1_데이터.xlsx',
                   sheet_name = '2. raw data')
data = data[252:]

def find_RMSE(prediction, groundtruth):
  return np.sqrt(np.mean(np.square(prediction-groundtruth)))

find_RMSE(forecast2[['predicted_mean']].values,data[['한국 수출금액']].values)